[{"path":"https://j-moravec.github.io/baffle/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Jiří C. Moravec Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://j-moravec.github.io/baffle/TODO.html","id":null,"dir":"","previous_headings":"","what":"TODO","title":"TODO","text":"[x] rework parameter names [x] plotting different shapes [x] squares, rectangles, circles polygonal shapes [ ] vignettes site pagedown [ ] text – enabled default, add examples vignette [x] bitmap images [ ] vector images [ ] symbols – supported text? [x] complex waffles? [ ] legend, title annotation? [ ] aspect ration != 1?","code":""},{"path":"https://j-moravec.github.io/baffle/articles/baffle.html","id":"basic-waffles","dir":"Articles","previous_headings":"","what":"Basic waffles","title":"Introduction to baffle","text":"baffle::waffle accepts vector abundancies x constructs waffle chart accordingly. vector abundancies must numeric integer vector. example, wish visualize difference 3 apples 8 oranges, need type :  default, waffle tries create square matrices uses categorical Set 1 palette, 9 less objects, continuous Zissou palette otherwise. Colors dimensions can specified specifying col, nrow ncol arguments.  baffle fills waffle rows bottomleft corner. change , can specify byrow arguments:","code":"waffle(c(3,8)) par(mfrow=c(1, 3)) waffle(c(25, 75), col=c(\"red\", \"gray\")) waffle(c(25, 75), col=c(\"blue\", \"gray\"), ncol=5) waffle(c(25, 75), col=c(\"darkgreen\", \"gray\"), nrow=5) par(mfrow=c(2,2)) waffle(c(13, 12), col=c(\"darkorchid\", \"gray\")) waffle(c(13, 12), col=c(\"skyblue\", \"gray\"), from=\"topright\") waffle(c(13,12), col=c(\"tomato\", \"gray\"), byrow=FALSE) waffle(c(13,12), col=c(\"springgreen\", \"gray\"), from=\"bottomright\", byrow=FALSE)"},{"path":"https://j-moravec.github.io/baffle/articles/baffle.html","id":"workhorse-functions","dir":"Articles","previous_headings":"Basic waffles","what":"Workhorse functions","title":"Introduction to baffle","text":"Waffles baffle created three basic functions: waffle allows one plot waffles directly, demonstrated . constructs waffle matrix using design function plots waffle matrix waffle.mat function. cases, waffle one needs. design function responsible transforming vector abundances waffle matrix. Waffle matrix matrix integers, integer corresponds item abundance vector, empty cells value NA. Design used internally waffle function, can used directly create design matrix can modified, merge multiple design matrices. waffle.mat function responsible plotting waffle matrix. matrix transformed grid square corresponding cell matrix plotted point grid. waffle.mat expect matrix format produced design, custom matrices can provided well.","code":""},{"path":"https://j-moravec.github.io/baffle/articles/baffle.html","id":"unstacked-waffles","dir":"Articles","previous_headings":"","what":"Unstacked Waffles","title":"Introduction to baffle","text":"Traditional waffles squared pie charts used display proportion whole. modern examples use waffles bar charts, waffles “unstacked” abundance element displayed side side.","code":"par(mar=c(4,0,0,0)) cyl = table(mtcars$cyl) waffle(cyl, stacked=FALSE, gap=1) legend(\"top\", horiz=TRUE, bty=\"n\", inset=0.9, xpd=TRUE,     legend=names(cyl), cex=2,     fill=palette.colors(length(cyl), \"Set 1\"), border=NA,     title=\"Number of cylinders\\n in 'mtcars'\", title.font=2, title.cex=1.5)"},{"path":"https://j-moravec.github.io/baffle/articles/baffle.html","id":"squares-circles-polygons","dir":"Articles","previous_headings":"","what":"Squares, Circles, Polygons","title":"Introduction to baffle","text":"Waffle plots typically represented coloured squares. Many modern examples favour different shapes make graphically distinct. waffle function flexible accepts plotting function. function long accepts x y coordinates diameter plotted object slightly smaller one. baffle comes several functions, default square, rectangle, circle, ellipse, regular convex polygon rcpoly. See ?Shapes information. functions similar graphics::symbols(). functions vectorized, fact even f argument waffle vectorized, multiple polygons can plotted effortesly. example, can represent number cylinders example regular n-sided polygons.  Shame legend allow flexibility!","code":"par(mar=c(4,0,0,0)) cyl = table(mtcars$cyl) waffle(cyl, stacked=FALSE, gap=1, f=rcpoly, n=as.numeric(names(cyl))) legend(\"top\", horiz=TRUE, bty=\"n\", inset=0.9, xpd=TRUE,     legend=names(cyl), cex=2,     fill=palette.colors(length(cyl), \"Set 1\"), border=NA,     title=\"Number of cylinders\\n in 'mtcars'\", title.font=2, title.cex=1.5)"},{"path":"https://j-moravec.github.io/baffle/articles/baffle.html","id":"text-and-points","dir":"Articles","previous_headings":"","what":"Text and Points","title":"Introduction to baffle","text":"noted , function prints x y coordinates can used! base functions points text already conforming can readily used. setting size can bit problematic. 1/strheight(s) 1/strwidth(s) answer, can called plotting window defined. one either check multiple values select fitting one, 4 example, write wrapper around text calculates label dimensions selects appropriate value. Since plotting functions called dimensions set, one can now use strheight strwidth establish text dimensions.  demonstrates easy improve convert existing functions perfectly useable baffle.","code":"autotext = function(x, y, labels, d=0.9, ...){     cex = min(1/strheight(labels), 1/strwidth(labels))*d     text(x, y, labels, cex=cex, ...)     }  par(mar=c(4,0,0,0)) cyl = table(mtcars$cyl) waffle(cyl, stacked=FALSE, gap=1, f=autotext, labels=names(cyl)) legend(\"top\", horiz=TRUE, bty=\"n\", inset=0.9, xpd=TRUE,     legend=names(cyl), cex=2,     fill=palette.colors(length(cyl), \"Set 1\"), border=NA,     title=\"Number of cylinders\\n in 'mtcars'\", title.font=2, title.cex=1.5)"},{"path":"https://j-moravec.github.io/baffle/articles/baffle.html","id":"bitmaps","dir":"Articles","previous_headings":"","what":"Bitmaps","title":"Introduction to baffle","text":"make things easier, baffle provides wrapper around base R’s rasterImage (graphics namespace) interface shape functions. read raster images (png) use lightweight png package. plot original well single colour representation using waffle rasters function.","code":"library(\"png\") path = system.file(\"img/Rlogo.png\", package=\"png\") imgR = imgG = imgB = img = readPNG(path) imgR[,,c(2,3)] = 0 imgG[,,c(1,3)] = 0 imgB[,,c(1,2)] = 0 waffle(c(1,1,1,1), f=rasters, image=list(img, imgR, imgG, imgB), rotate=c(0,30,60,90))"},{"path":"https://j-moravec.github.io/baffle/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jiří Moravec. Author, maintainer.","code":""},{"path":"https://j-moravec.github.io/baffle/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Moravec J (2022). baffle: Make Waffle Plots Base Graphics. https://j-moravec.github.io/baffle/, https://github.com/j-moravec/baffle.","code":"@Manual{,   title = {baffle: Make Waffle Plots with Base Graphics},   author = {Jiří Moravec},   year = {2022},   note = {https://j-moravec.github.io/baffle/, https://github.com/j-moravec/baffle}, }"},{"path":"https://j-moravec.github.io/baffle/index.html","id":"baffle","dir":"","previous_headings":"","what":"Make Waffle Plots with Base Graphics","title":"Make Waffle Plots with Base Graphics","text":"Waffle graphs base R graphics.","code":""},{"path":"https://j-moravec.github.io/baffle/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Make Waffle Plots with Base Graphics","text":"can install latest version baffle CRAN : directly GitHub using devtools package:","code":"install.packages(\"baffle\") devtools::install_github(\"j-moravec/baffle\")"},{"path":"https://j-moravec.github.io/baffle/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Make Waffle Plots with Base Graphics","text":"See online documentation complex examples.","code":"library(baffle) waffle(c(25,75), col=c(\"darkorchid\", \"lightgray\"))"},{"path":"https://j-moravec.github.io/baffle/reference/Shapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot convex polygons — Shapes","title":"Plot convex polygons — Shapes","text":"collection functions plotting polygonal shapes.","code":""},{"path":"https://j-moravec.github.io/baffle/reference/Shapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot convex polygons — Shapes","text":"","code":"square(x, y, d = 0.9, ...)  rectangle(x, y, d = 0.9, dx = d, dy = d, ...)  circle(x, y, d = 0.9, n = 1000, ...)  ellipse(x, y, d = 0.9, dx = d, dy = d, n = 1000, ...)  rcpoly(x, y, n, d = 0.9, rotate = 0, ...)  shapes(x, y, n, d = 0.9, dx = d, dy = d, rotate = 0, ...)"},{"path":"https://j-moravec.github.io/baffle/reference/Shapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot convex polygons — Shapes","text":"x, y coordinates d **optional** diameter, see details ... **optional** graphical parameters `col`, `border`, `lty` `lwd` passed [graphics::polygon()] [graphics::rect()] dx, dy **optional** diameter either coordinate direction n number vertices polygon, minimum three (triangle). Large `n`, `n=1000` approximate circle. vertices start 12 o'clock position placed clockwise regular intervals. rotate **optional** clockwise rotation degrees (0-360°), available `square` `rectangle`","code":""},{"path":"https://j-moravec.github.io/baffle/reference/Shapes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot convex polygons — Shapes","text":"Polygons drawn centered `x` `y` coordinates, diameter `d` (`dx` `dy`). Typically, different shapes obtained parametrization `shapes()` function, draws convex polygon using [graphics::polygon()], exception `square()` `rectangle()` function, use [graphics::rect()] function instead, behave slightly differently, slightly faster. diameter parameter `d` interpreted differently depending `square()` `rectangle()` polygonal functions build `shapes()` function (`circle()`, `ellipse()` `rcpoly()`). `square()` `rectangle()`, diameter size square, `d=1` thus fills whole 1x1 tile. `shapes()` function, `d` diameter inscribed circle square size `d`. convenient solution prevent accidental overplotting individual shapes plotted next regular intervals, distance points equal diameter cases. See examples. shapes function accept graphical parameters `col`, `border`, `lty` `lwd`, passed [graphics::polygon()] [graphics::rect()]. Apart different default values, behave way. parameters vectorized recycle required, typical warning parameters multiply . can used create pleasant geometric images. See examples.","code":""},{"path":"https://j-moravec.github.io/baffle/reference/Shapes.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plot convex polygons — Shapes","text":"square(): draw squares rectangle(): draw rectangles circle(): draw circles ellipse(): draw ellipses rcpoly(): draw regular convex polygons shapes(): draw convex polygons","code":""},{"path":[]},{"path":"https://j-moravec.github.io/baffle/reference/Shapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot convex polygons — Shapes","text":"","code":"plot(0, 0) # create plotting window  # Following calls are equivalent square(0, 0, 1) rectangle(0, 0, 1) rectangle(0, 0, dx=1, dy=1)  # Not equivalent to `square` rcpoly(0, 0, 4, d=1)  # Same output as `square`, but not equivalent rcpoly(0, 0, 4, d=sqrt(2), rotate=45)   # Vectorizing parameters plot(0, 0) rotate = seq(0, 18, by=30) d = seq(1, by=-0.1, length.out = length(rotate)) rcpoly(0,0,3, border=\"red\", lwd=3, rotate=rotate, d=d)"},{"path":"https://j-moravec.github.io/baffle/reference/baffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Baffle: Waffle graphs with base graphics — baffle","title":"Baffle: Waffle graphs with base graphics — baffle","text":"package provides functions make waffle graphs base graphics.","code":""},{"path":"https://j-moravec.github.io/baffle/reference/rasters.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot raster image — rasters","title":"Plot raster image — rasters","text":"Plot raster image centered `x` `y` coordinates scaled diameter `d`.","code":""},{"path":"https://j-moravec.github.io/baffle/reference/rasters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot raster image — rasters","text":"","code":"rasters(x, y, image, d = 0.9, dx = NA, dy = NA, rotate = 0, ...)"},{"path":"https://j-moravec.github.io/baffle/reference/rasters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot raster image — rasters","text":"x, y coordinates image raster image d **optional** diameter, see details dx, dy **optional** diameter either coordinate direction rotate **optional** clockwise rotation degrees (0-360°) ... **optional** parameters passed [graphics::rasterImage()], `interpolate`","code":""},{"path":"https://j-moravec.github.io/baffle/reference/rasters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot raster image — rasters","text":"`rasters()` function convenient wrapper around [graphics::rasterImage()] similar interface [Shapes] functions available package ([square()], [circle()] [rcpoly()]). raster image plotted centered `x` `y` coordinates scaled diameter size `d`. `dx` `dy` `NA`, proportions raster kept unchanged, otherwise scaled specified size either direction. scaling done rotation. Unlike `rasterImage`, rotation performed clockwise rotation axis center raster (.e., provided x y coordinates), rather bottom left coordinate `x0`. rotation performed scaling. yet, rotation accurate aspect ratio set 1 (`asp=1`) `graphics::plot.window()` call. `rasters()` function fully vectorized.","code":""},{"path":[]},{"path":"https://j-moravec.github.io/baffle/reference/rasters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot raster image — rasters","text":"","code":"# create plotting window plot.new(); plot.window(c(-1,1), c(-1,1), asp=1); axis(1); axis(2)  # create raster image, alpha is convenient when overplotting img = matrix(adjustcolor(\"black\", alpha.f=0.3), 3, 3) img[2, 2] = adjustcolor(\"white\", alpha.f=0.3) img = as.raster(img)  rasters(0, 0, img)  # interpolate=FALSE makes quite a difference rasters(0, 0, img, interpolate=FALSE)  # arguments are vectorized, standard recycling rules apply rasters(0, 0, img, interpolate=FALSE, rotate=c(30, 60, 90)) rasters(c(-1, -0.5,  0.5, 1), c(1, 0.5, -0.5, -1), img, interpolate=FALSE)"},{"path":"https://j-moravec.github.io/baffle/reference/recycle_dots.html","id":null,"dir":"Reference","previous_headings":"","what":"Recycle dots args — recycle_dots","title":"Recycle dots args — recycle_dots","text":"Recycle dots args","code":""},{"path":"https://j-moravec.github.io/baffle/reference/recycle_dots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recycle dots args — recycle_dots","text":"","code":"recycle_dots(x, ...)"},{"path":"https://j-moravec.github.io/baffle/reference/recycle_dots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recycle dots args — recycle_dots","text":"x integer vector, typically values ranging 1 n, integer integer specifying index element item `...` ... additional arguments, length item `...` larger one, elements recycled according indiced specified vector `x`","code":""},{"path":"https://j-moravec.github.io/baffle/reference/recycle_dots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recycle dots args — recycle_dots","text":"recycled arguments `...`","code":""},{"path":"https://j-moravec.github.io/baffle/reference/waffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a waffle chart. — waffle","title":"Make a waffle chart. — waffle","text":"Waffle chart pie chart visually represents abundances number squares. waffle chart consists squares plotted rectangular lattice according design matrix constructed vector abundances can provided directly.","code":""},{"path":"https://j-moravec.github.io/baffle/reference/waffle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a waffle chart. — waffle","text":"","code":"waffle(   x,   f = NULL,   ...,   nrow = NULL,   ncol = NULL,   byrow = TRUE,   from = \"bottomleft\",   stacked = TRUE,   gap = 0,   horiz = TRUE,   add = FALSE )  waffle.mat(x, f = square, ..., add = FALSE)  design(   x,   nrow = NULL,   ncol = NULL,   byrow = TRUE,   from = \"bottomleft\",   stacked = TRUE,   horiz = TRUE,   gap = 0 )"},{"path":"https://j-moravec.github.io/baffle/reference/waffle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a waffle chart. — waffle","text":"x vector abundances design matrix (see details) f **optional** shape function (see details) ... **optional** parameters passed `f` function nrow **optional** number rows ncol **optional** number columns byrow **optional** fill matrix rows columns **optional** starting position matrix filled, one \"bottomleft\", \"bottomright\", \"topleft\" \"topright\". stacked **optional** FALSE, produce unstacked waffle chart, see details gap **optional** gap unstacked subwaffles, works unstacked waffle charts horiz **optional** FALSE, vertical instead horizontal waffle chart produced, works unstacked waffle charts add **optional** whether add current plot","code":""},{"path":"https://j-moravec.github.io/baffle/reference/waffle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a waffle chart. — waffle","text":"`design()` returns design matrix (see details), addition, `x` named vector,   names preserved `levels` attribute.   `waffle()` `waffle.mat()` return value","code":""},{"path":"https://j-moravec.github.io/baffle/reference/waffle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a waffle chart. — waffle","text":"`waffle()` function accepts vector abundances plots waffle chart. done first constructing design matrix using `design()` function, parsed `waffle.mat()` function. `design()` functions construct design matrix according. design matrix filled integer vector derived abundance vector `x`. integer correspond order abundances `x`, quantity equal value `x`. means `x=c(3,5)`, design matrix filled three `1` five `2`, cells design matrix set unknown values `NA`. default, design matrix filled row, starting bottom left corner, can changed setting variables `byrow` ``. setting `byrow=FALSE`, matrix filled columns first. `ncol` `nrow` specified, squared matrix fit sum abundances constructed. default, design matrix stacked, .e., elements placed single matrix object, similarly barplot produces stacked lines. specifying `stack=FALSE`, `design()` unstacks elements, placed matricies, connected `NA` elements size `gap`. complex input vector `x` named vector, names preserved `levels` attribute. levels currently used, might used future automatic legend creation subsetting. function `waffle.mat()` accepts custom-made design matrix thus allows better control colored regions. called internally `waffle()` function, serves easy use interface `waffle.mat()`. reason, `waffle.mat()` checks validity input arguments set default colors. assumed allocated coordinate system `0` `ncol` x `0` `ncol` y. Squares filled top right corner coordinate system. `add=FALSE`, new window fixed aspect ratio x/y=1 allocated plotted polygons squares (default). might cause plot margins, thus main title, quite far away. case, plotting title using `text()` instead `title()` might better idea. case, coordinates might : text(x=(ncol+2)/2, y=nrow+1,...)","code":""},{"path":[]},{"path":"https://j-moravec.github.io/baffle/reference/waffle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a waffle chart. — waffle","text":"","code":"waffle(c(50,25,25))  waffle(c(25,75), col=c(\"darkorchid\", \"lightgray\"))  waffle(c(14,8,4), nrow=3)   # custom design matrix with a more complex structure cols = palette.colors(3, \"Set 1\") design_mat = matrix(NA, 7,10) design_mat[1,] = 1 design_mat[2,1:8] = 1 design_mat[4,] = 2 design_mat[5,1:4] = 2 design_mat[7,1:5] = 3 waffle.mat(design_mat, col=cols)"}]
